import com.ing.blockchain.zk.components.SecretOrderGroupGenerator;
import com.ing.blockchain.zk.dto.*;
import com.ing.blockchain.zk.exception.ZeroKnowledgeException;
import com.ing.blockchain.zk.util.ExportUtil;
import org.relaxng.datatype.Datatype;

import javax.xml.bind.DatatypeConverter;

import java.math.BigInteger;
import java.sql.DataTruncation;

// sample code for zero knowledge age verification - government/kyc-provider provides a proof (TTPMessage - trusted third party message)

public class ZKRPSample {
    public static SecretOrderGroup generateSecretGroup() {
        return new SecretOrderGroupGenerator(512).generate();
    }

    public static TTPMessage generateTTPMessage (String value) {
        // Create a commitment with the user's age (known only by the user and government
        // TODO: Use `value` argument
        BigInteger commitmentValue = new BigInteger("19");

        // Create a random seed, generated by the govt. The govt should probably be the one that runs Eth.exportSolidity()
        SecretOrderGroup secretGroup = generateSecretGroup();

        // ran by government, generates the proving kit
        // TODO: this message needs to be signed by the govt so that the verifier can check the authenticity of the proof via EC signature verification (JS impl in https://github.com/appliedblockchain/zkp-integer-threshold)
        TTPMessage ttpMessage = Govt.createTrustedMessage(commitmentValue, secretGroup);

        return ttpMessage;
    }

    public static void main(String[] args) {

//        if (args.length == 0) {
//            Utils.print("No args supplied");
//            return;
//        }

//        if (args[0].equals("generate commitment")) {
//            Commitment commitment = generateCommitment("19");
//            Utils.print("0x" + DatatypeConverter.printHexBinary(ExportUtil.exportForEVM(commitment)));
//        }
//
        if (args[0].equals("generate proof")) {
            TTPMessage ttpMessage = generateTTPMessage("19");
            ClosedRange ageRange = Config.getAgeRange();

            BoudotRangeProof ageProof = User.generateRangeProof(ttpMessage, ageRange);

            Commitment commitment = ttpMessage.getCommitment();

            Utils.print("0x" + DatatypeConverter.printHexBinary(ExportUtil.exportForEVM(commitment)));

            Utils.print("|");

            Utils.print("0x" + DatatypeConverter.printHexBinary(ExportUtil.exportForEVM(ageProof, commitment, ageRange)));

            return;
        }

//        BigInteger commitmentValue = new BigInteger("19"); // user's age, known only by the user and govt.
//        ClosedRange ageRange = Config.getAgeRange();
//
//        Utils.print(String.format("Valid age range: %d - %d", ageRange.getStart(), ageRange.getEnd()));
//        Utils.print(String.format("User's (secret) age: %d", commitmentValue));
//
//        SecretOrderGroup secretGroup = generateSecretGroup(); // random seed, generated by the govt, the govt has it so it should probably be the one that runs Eth.exportSolidity()
//
//        // ran by government, generates the proving kit
//        // TODO: this message needs to be signed by the govt so that the verifier can check the authenticity of the proof via EC signature verification (JS impl in https://github.com/appliedblockchain/zkp-integer-threshold)
//        TTPMessage trustedMessage = Govt.createTrustedMessage(commitmentValue, secretGroup);
//
//        if (ageRange.contains(trustedMessage.getX())) {
//            Utils.print("ageRange includes the commitment value");
//
//            // ran by user, generates the "proof of knowledge"
//            BoudotRangeProof ageProof = User.generateRangeProof(trustedMessage, ageRange);
//            Utils.print("Age proof:");
//            Utils.print(ageProof);
//
//            Commitment commitment = trustedMessage.getCommitment();
//            System.out.println("Commitment = ");
//            Utils.print(DatatypeConverter.printHexBinary(ExportUtil.exportForEVM(commitment)));
//
//
//            System.out.println("Proof = ");
//            System.out.println(DatatypeConverter.printHexBinary(ExportUtil.exportForEVM(ageProof, commitment, ageRange)));
//
//
//
//            // the service runs the validation, with the proof (TODO: the service also needs to run verify() on signed message (passed by the user, signed by the KYC/Govt)
//            try {
//                Service.validateAgeProof(ageProof, trustedMessage, Config.getAgeRange());
//            } catch (ZeroKnowledgeException ex) {
//                Utils.print("ERROR - Validation of Age-Knowledge-Proof FAILED!");
//            }
//
//            // That's it! The end!
//
//            // EXTRA:
//            // code to export commitment to Ethereum so a smart contract can verify the range proof
//            byte[] solidity = Eth.exportSolidity(secretGroup, commitmentValue);
//        } else {
//            Utils.print("Error! The input age is probably outside the range (ageRange doesn't include the commitment value");
//        }

    }
}
